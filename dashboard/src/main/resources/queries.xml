<queries>

	<query name="archivedToS3_count">
		<text>
			select org_id, count(distinct(doc_id)) as doc_count, status, error_message
			from summary_docreceiver_archive{env}  
			group by org_id, status, error_message
		</text>
	</query>
	<query name="upload_count">
        <text>
            select org_id, count(distinct(doc_id)) as doc_count, status, if(error_message like '/mnt%','No space left on device',error_message) as error_message
            from summary_docreceiver_upload{env}   
            group by org_id, status, if(error_message like '/mnt%','No space left on device',error_message)
        </text>
    </query>
	<query name="parse_success_count">
		<text>
			select a.org_id, count(distinct a.doc_id) as doc_count, a.sent_to_ocr, a.sent_to_persist, a.status
            from summary_parser{env} a
            join summary_coordinator_jobfinish{env} b
            on a.hadoopjob_id = b.hadoop_job_id
            where b.status = "success" and a.status = "success"
            group by a.org_id, a.status, a.sent_to_ocr, a.sent_to_persist
		</text>
	</query>
	<query name="parse_error_count">
        <text>
            select a.org_id, a.error_message, count(distinct a.doc_id) as doc_count, a.status 
            from summary_parser{env} a join summary_coordinator_jobfinish{env} b on a.hadoopjob_id = b.hadoop_job_id and b.status = "success" 
            left outer join summary_parser{env} o on o.doc_id=a.doc_id and o.status="success" 
            where a.status="error" and o.doc_id is null and a.doc_id is not null 
            group by a.org_id, a.status, a.error_message
        </text>
    </query>
	<query name="ocr_success_count">
        <text>
            select a.org_id, count(distinct a.doc_id) as doc_count, a.status 
            from summary_ocr{env} a
            join summary_coordinator_jobfinish{env} b
            on a.hadoopjob_id = b.hadoop_job_id
            where b.status = "success" and a.status = "success"
            group by a.org_id, a.status
        </text>
    </query>
    <query name="ocr_error_count">
        <text>
            select a.org_id, a.error_message, count(distinct a.doc_id) as doc_count, a.status 
            from summary_ocr{env} a join summary_coordinator_jobfinish{env} b on a.hadoopjob_id = b.hadoop_job_id and b.status = "success" 
            left outer join summary_ocr{env} o on o.doc_id=a.doc_id and o.status="success" 
            where a.status="error" and o.doc_id is null and a.doc_id is not null 
            group by a.org_id, a.status, a.error_message
        </text>
    </query>
    <query name="persist_success_count">
        <text>
            select a.org_id, count(distinct a.doc_id) as doc_count, a.status
            from summary_persist_mapper{env} a 
            join summary_coordinator_jobfinish{env} b 
            on a.hadoopjob_id = b.hadoop_job_id 
            where b.status = "success" and a.status = "success"
            group by a.org_id, a.status
        </text>
    </query>
    <query name="persist_error_count">
        <text>
            select a.org_id, a.error_message, count(distinct a.doc_id) as doc_count, a.status 
            from summary_persist_mapper{env} a join summary_coordinator_jobfinish{env} b on a.hadoopjob_id = b.hadoop_job_id and b.status = "success" 
            left outer join summary_persist_mapper{env} o on o.doc_id=a.doc_id and o.status="success" 
            where a.status="error" and o.doc_id is null and a.doc_id is not null 
            group by a.org_id, a.status, a.error_message
        </text>
    </query>
    <query name="verified_count">
        <text>
            select org_id, count(distinct doc_id) as doc_count
            from summary_qafromseqfile{env}
            where patient_key is not null
            group by org_id
        </text>
    </query>
    <query name="docs_queue">
        <text>
            select jr.org_id, jr.activity, count(distinct(dr.doc_id)) as doc_count, count(p.sent_to_persist) as sent_to_persist_count, count(p.sent_to_ocr) as sent_to_ocr_count, count(distinct(o.doc_id)) as sent_to_persist_byOcr_count
            from summary_coordinator_jobrequest{env} jr
            left outer join summary_coordinator_jobfinish{env} jf
            on jr.job_id=jf.job_id and jr.work_id=jf.work_id 
            left outer join summary_docreceiver_seqfile{env} dr on dr.seqfile_file=jr.seqfile
            left outer join summary_parser{env} p on p.job_id=jr.from_job_id and p.status='success'
            left outer join summary_ocr{env} o on o.job_id=jr.from_job_id and o.status='success'
            where jf.job_id is null and (jr.activity='parser' or jr.activity='ocr' or jr.activity='persist')
            group by jr.org_id, jr.activity
        </text>
    </query>
    <query name="docs_in_failedjobs">
        <text>
            select jr.org_id, jr.activity, count(distinct(dr.doc_id)) as doc_count, count(p.sent_to_persist) as sent_to_persist_count, count(p.sent_to_ocr) as sent_to_ocr_count, count(distinct(o.doc_id)) as ocr_count
            from summary_coordinator_jobrequest{env} jr
            join summary_coordinator_jobfinish{env} jf
            on jr.job_id=jf.job_id and jr.work_id=jf.work_id and jf.status="error" 
            left outer join summary_coordinator_jobfinish{env} jfs on jfs.status="success" and jfs.orig_job_id=jr.orig_job_id and jfs.orig_job_id is not null
            left outer join summary_docreceiver_seqfile{env} dr on dr.seqfile_file=jr.seqfile
            left outer join summary_parser{env} p on p.job_id=jr.from_job_id and p.status='success'
            left outer join summary_ocr{env} o on o.job_id=jr.from_job_id and o.status='success'
            where jfs.orig_job_id is null and jf.job_id is not null and (jr.activity='parser' or jr.activity='ocr' or jr.activity='persist')
            group by jr.org_id, jr.activity
        </text>
    </query>
    <query name="docs_in_drq_count">
        <text>
            select dr.org_id, dr.seqfile_file, count(distinct(dr.doc_id)) as doc_count, max(dr.time) as updated_time
            from summary_docreceiver_seqfile{env} dr
            left outer join summary_docreceiver_seqfile_post{env} post on dr.seqfile_directory=post.seqfile_path and post.redis_queue_name is not null
            left outer join summary_afsdownload d on d.doc_id=dr.doc_id and d.status="success" 
            left outer join summary_coordinator_jobfinish b on d.hadoopjob_id = b.hadoop_job_id and b.status="success"
            where post.seqfile_path is null and dr.seqfile_directory is not null and d.doc_id is null and dr.status="success" group by dr.org_id, dr.seqfile_file order by updated_time desc
        </text>
    </query>
    <query name="docs_abandoned_coordinator_count">
        <text>
            select dr.org_id, dr.seqfile_file, count(distinct(dr.doc_id)) as doc_count, max(post.time) as posted_time
            from summary_docreceiver_seqfile_post{env} post join summary_docreceiver_seqfile{env} dr on dr.seqfile_directory=post.seqfile_path
            left outer join summary_coordinator_workrequest{env} wr on post.seqfile_path=wr.source_dir
            where wr.source_dir is null and post.seqfile_path is not null and post.status="success" and post.redis_queue_name is not null group by dr.org_id, dr.seqfile_file order by posted_time desc
        </text>
    </query>
    <query name="docs_in_drq">
        <text>
            select dr.doc_id, dr.org_id, dr.seqfile_file
            from summary_docreceiver_seqfile{env} dr
            left outer join summary_docreceiver_seqfile_post{env} post on dr.seqfile_directory=post.seqfile_path and post.redis_queue_name is not null
            where post.seqfile_path is null and dr.seqfile_directory is not null and dr.status="success" and {userParams} order by dr.org_id, dr.seqfile_file
        </text>
    </query>
    <query name="docs_not_sentTo_coordinator_byorgAndSeqfile">
        <text>
            select dr.doc_id, dr.org_id, dr.seqfile_file
            from summary_docreceiver_seqfile{env} dr
            left outer join summary_docreceiver_seqfile_post{env} post on dr.seqfile_directory=post.seqfile_path and post.redis_queue_name is not null
            where post.seqfile_path is null and dr.seqfile_directory is not null and dr.status="success" and {userParams} order by dr.org_id, dr.seqfile_file
        </text>
    </query>
    
    <!-- Manifest queries -->
    <query name="manifest_recovery_drq">
        <text>
            select doc_id, org_id
            from docrecovery_manifest_docreceiver_queue{env} where {userParams}
        </text>
    </query>
	
	<group name="completeness">
 	    <run-query name="archivedToS3_count"/>
		<!-- <run-query name="upload_count"/> 
		<run-query name="parse_success_count"/>
		<run-query name="parse_error_count"/>
		<run-query name="ocr_success_count"/>
		<run-query name="ocr_error_count"/> 
		<run-query name="persist_success_count"/>
		<run-query name="persist_error_count"/>
		<run-query name="verified_count"/>
		<run-query name="docs_queue"/> 
		<run-query name="docs_in_failedjobs"/>
		<run-query name="docs_in_drq_count"/>
		<run-query name="docs_abandoned_coordinator_count"/> -->
	</group>
	
	<group name="summary_tables_updates">
	
	</group>
	
	<group name="docsToRecover">
	   <run-query name="docs_not_sentTo_coordinator"/>
	</group>
	
	<group name="upload">
	   <run-query name="upload_count"/>
	</group>
	
	<group name="documentsPending">
       <run-query name="docs_queue"/>
    </group>
    
    <group name="documentsFailed">
       <run-query name="docs_in_failedjobs"/>
    </group>
    
    <group name="drQueueDocsCount">
       <run-query name="docs_notSentTo_coordinator_count"/>
    </group>
    
    <group name="documentsAbandoned">
       <run-query name="docs_sentTo_coordinator_butNoWorkReq_count"/>
    </group>
    
</queries>